generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  nome           String
  email          String          @unique
  telefone       String?
  passwordHash   String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  categories     Categorie[]
  transactions   Transaction[]
  plannings      Planning[]
  goals          Goal[]
  assets         Asset[]
  assetMovements AssetMovement[]
  Parameter      Parameter[]

  @@map("users")
}

model Parameter {
  id            String   @id @default(uuid())
  anoReferencia Int
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("parameters")
}

model Categorie {
  id           String          @id @default(uuid())
  nome         String
  tipo         TransactionType
  codIcone     Int
  codColor     Int
  descricao    String?
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  transactions Transaction[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  plannings    Planning[]

  @@map("categories")
}

model Transaction {
  id             String            @id @default(uuid())
  valor          Decimal
  status         TransactionStatus @default(PENDENTE)
  descricao      String?
  tipo           TransactionType
  data           DateTime
  isRecurring    Boolean           @default(false)
  nextRecurrence DateTime?
  categoryId     String
  category       Categorie         @relation(fields: [categoryId], references: [id])
  userId         String
  user           User              @relation(fields: [userId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@map("transactions")
}

model Planning {
  id          String          @id @default(uuid())
  titulo      String
  valorTarget Decimal
  categoryId  String
  category    Categorie       @relation(fields: [categoryId], references: [id])
  tipo        TransactionType
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("plannings")
}

model Goal {
  id           String    @id @default(uuid())
  titulo       String
  dataLimite   DateTime?
  valorTotal   Decimal
  valorInicial Decimal?
  descricao    String?
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("goals")
}

model Asset {
  id        String          @id @default(uuid())
  tipo      AssetType
  ticker    String
  nome      String
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  movements AssetMovement[]

  @@map("assets")
}

model AssetMovement {
  id            String       @id @default(uuid())
  valorUnitario Decimal
  quantidade    Decimal
  data          DateTime
  tipoMovimento MovementType
  assetId       String
  asset         Asset        @relation(fields: [assetId], references: [id])
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("asset_movements")
}

enum TransactionType {
  RECEITA
  DESPESA
}

enum TransactionStatus {
  PENDENTE
  EXECUTADO
  CANCELADO
}

enum MovementType {
  COMPRA
  VENDA
}

enum AssetType {
  ACAO
  FII
  CRIPTOMOEDA
  STOCK
  BDR
}
